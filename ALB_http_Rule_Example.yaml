Parameters:
  VPCID:
    Default: vpc-07edfc387635d0211
    Description: VPC ID
    Type: String
  Subnet1:
    Default: subnet-02e215d937d799b99
    Description: SubnetID For Subnet1
    Type: String
  Subnet2:
    Default: subnet-0ca523663ed5522fe
    Description: SubnetID For Subnet2
    Type: String
  AvailabilityZoneForSubnet1:
    Default: us-east-1a
    Description: AvailabilityZone For Subnet1
    Type: String
  AvailabilityZoneForSubnet2:
    Default: us-east-1b
    Description: AvailabilityZone For Subnet2
    Type: String

Resources:
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internal
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
  TargetGroup1:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Port: 1000
      Protocol: HTTP
      VpcId: !Ref VPCID
  TargetGroup2:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Port: 2000
      Protocol: HTTP
      VpcId: !Ref VPCID
  ListenerRule1:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup1
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: User-Agent
            Values:
              - Mozilla
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: Referer
            Values:
              - 'https://www.amazon.com/'
      ListenerArn: !Ref Listener
      Priority: 1
  ListenerRule2:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup2
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: User-Agent
            Values:
              - Chrome
      ListenerArn: !Ref Listener
      Priority: 2
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup1
      LoadBalancerArn: !Ref LoadBalancer
      Port: '8000'
      Protocol: HTTP

  Listener1:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
           Protocol: "HTTP"
           Port: 8000
           Host: "#{host}"
           Path: "/#{path}"
           Query: "#{query}"
           StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref LoadBalancer
      Port: '80'
      Protocol: HTTP

  LoadBalancerAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      Namespace: AWS/ApplicationELB
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt 
            - LoadBalancer
            - LoadBalancerFullName
        - Name: TargetGroup
          Value: !GetAtt 
            - TargetGroup1
            - TargetGroupFullName
      MetricName: UnHealthyHostCount
      Period: 60
      Statistic: Average
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      EvaluationPeriods: 1
Outputs:
  LoadBalancer:
    Value: !Ref LoadBalancer
  TargetGroup1:
    Value: !Ref TargetGroup1
  TargetGroup2:
    Value: !Ref TargetGroup2
  ListenerArn:
    Value: !Ref Listener
  ListenerRule1Arn:
    Value: !Ref ListenerRule1
  ListenerRule2Arn:
    Value: !Ref ListenerRule2
  LoadBalancersAssociatedWithTargetGroup1:
    Description: LoadBalancers associated with TargetGroup
    Value: !Select 
      - '0'
      - !GetAtt 
        - TargetGroup1
        - LoadBalancerArns
  LoadBalancersAssociatedWithTargetGroup2:
    Description: LoadBalancers associated with TargetGroup
    Value: !Select 
      - '0'
      - !GetAtt 
        - TargetGroup2
        - LoadBalancerArns
  TargetGroupFullName1:
    Description: FullName of TargetGroup1
    Value: !GetAtt 
      - TargetGroup1
      - TargetGroupFullName
  TargetGroupFullName2:
    Description: FullName of TargetGroup2
    Value: !GetAtt 
      - TargetGroup2
      - TargetGroupFullName